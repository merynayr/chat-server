// Code generated by http://github.com/gojuno/minimock (v3.4.3). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/merynayr/chat-server/internal/repository.ChatRepository -o chat_repository_minimock.go -n ChatRepositoryMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/merynayr/chat-server/internal/model"
)

// ChatRepositoryMock implements mm_repository.ChatRepository
type ChatRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcChatExists          func(ctx context.Context, id int64) (b1 bool, err error)
	funcChatExistsOrigin    string
	inspectFuncChatExists   func(ctx context.Context, id int64)
	afterChatExistsCounter  uint64
	beforeChatExistsCounter uint64
	ChatExistsMock          mChatRepositoryMockChatExists

	funcCreateChat          func(ctx context.Context, chat *model.Chat) (i1 int64, err error)
	funcCreateChatOrigin    string
	inspectFuncCreateChat   func(ctx context.Context, chat *model.Chat)
	afterCreateChatCounter  uint64
	beforeCreateChatCounter uint64
	CreateChatMock          mChatRepositoryMockCreateChat

	funcCreateMessage          func(ctx context.Context, message *model.MessageInfo) (err error)
	funcCreateMessageOrigin    string
	inspectFuncCreateMessage   func(ctx context.Context, message *model.MessageInfo)
	afterCreateMessageCounter  uint64
	beforeCreateMessageCounter uint64
	CreateMessageMock          mChatRepositoryMockCreateMessage

	funcCreateRoster          func(ctx context.Context, chatID int64, UserIDs []int64) (err error)
	funcCreateRosterOrigin    string
	inspectFuncCreateRoster   func(ctx context.Context, chatID int64, UserIDs []int64)
	afterCreateRosterCounter  uint64
	beforeCreateRosterCounter uint64
	CreateRosterMock          mChatRepositoryMockCreateRoster

	funcDeleteChat          func(ctx context.Context, id int64) (err error)
	funcDeleteChatOrigin    string
	inspectFuncDeleteChat   func(ctx context.Context, id int64)
	afterDeleteChatCounter  uint64
	beforeDeleteChatCounter uint64
	DeleteChatMock          mChatRepositoryMockDeleteChat
}

// NewChatRepositoryMock returns a mock for mm_repository.ChatRepository
func NewChatRepositoryMock(t minimock.Tester) *ChatRepositoryMock {
	m := &ChatRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ChatExistsMock = mChatRepositoryMockChatExists{mock: m}
	m.ChatExistsMock.callArgs = []*ChatRepositoryMockChatExistsParams{}

	m.CreateChatMock = mChatRepositoryMockCreateChat{mock: m}
	m.CreateChatMock.callArgs = []*ChatRepositoryMockCreateChatParams{}

	m.CreateMessageMock = mChatRepositoryMockCreateMessage{mock: m}
	m.CreateMessageMock.callArgs = []*ChatRepositoryMockCreateMessageParams{}

	m.CreateRosterMock = mChatRepositoryMockCreateRoster{mock: m}
	m.CreateRosterMock.callArgs = []*ChatRepositoryMockCreateRosterParams{}

	m.DeleteChatMock = mChatRepositoryMockDeleteChat{mock: m}
	m.DeleteChatMock.callArgs = []*ChatRepositoryMockDeleteChatParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mChatRepositoryMockChatExists struct {
	optional           bool
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockChatExistsExpectation
	expectations       []*ChatRepositoryMockChatExistsExpectation

	callArgs []*ChatRepositoryMockChatExistsParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ChatRepositoryMockChatExistsExpectation specifies expectation struct of the ChatRepository.ChatExists
type ChatRepositoryMockChatExistsExpectation struct {
	mock               *ChatRepositoryMock
	params             *ChatRepositoryMockChatExistsParams
	paramPtrs          *ChatRepositoryMockChatExistsParamPtrs
	expectationOrigins ChatRepositoryMockChatExistsExpectationOrigins
	results            *ChatRepositoryMockChatExistsResults
	returnOrigin       string
	Counter            uint64
}

// ChatRepositoryMockChatExistsParams contains parameters of the ChatRepository.ChatExists
type ChatRepositoryMockChatExistsParams struct {
	ctx context.Context
	id  int64
}

// ChatRepositoryMockChatExistsParamPtrs contains pointers to parameters of the ChatRepository.ChatExists
type ChatRepositoryMockChatExistsParamPtrs struct {
	ctx *context.Context
	id  *int64
}

// ChatRepositoryMockChatExistsResults contains results of the ChatRepository.ChatExists
type ChatRepositoryMockChatExistsResults struct {
	b1  bool
	err error
}

// ChatRepositoryMockChatExistsOrigins contains origins of expectations of the ChatRepository.ChatExists
type ChatRepositoryMockChatExistsExpectationOrigins struct {
	origin    string
	originCtx string
	originId  string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmChatExists *mChatRepositoryMockChatExists) Optional() *mChatRepositoryMockChatExists {
	mmChatExists.optional = true
	return mmChatExists
}

// Expect sets up expected params for ChatRepository.ChatExists
func (mmChatExists *mChatRepositoryMockChatExists) Expect(ctx context.Context, id int64) *mChatRepositoryMockChatExists {
	if mmChatExists.mock.funcChatExists != nil {
		mmChatExists.mock.t.Fatalf("ChatRepositoryMock.ChatExists mock is already set by Set")
	}

	if mmChatExists.defaultExpectation == nil {
		mmChatExists.defaultExpectation = &ChatRepositoryMockChatExistsExpectation{}
	}

	if mmChatExists.defaultExpectation.paramPtrs != nil {
		mmChatExists.mock.t.Fatalf("ChatRepositoryMock.ChatExists mock is already set by ExpectParams functions")
	}

	mmChatExists.defaultExpectation.params = &ChatRepositoryMockChatExistsParams{ctx, id}
	mmChatExists.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmChatExists.expectations {
		if minimock.Equal(e.params, mmChatExists.defaultExpectation.params) {
			mmChatExists.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmChatExists.defaultExpectation.params)
		}
	}

	return mmChatExists
}

// ExpectCtxParam1 sets up expected param ctx for ChatRepository.ChatExists
func (mmChatExists *mChatRepositoryMockChatExists) ExpectCtxParam1(ctx context.Context) *mChatRepositoryMockChatExists {
	if mmChatExists.mock.funcChatExists != nil {
		mmChatExists.mock.t.Fatalf("ChatRepositoryMock.ChatExists mock is already set by Set")
	}

	if mmChatExists.defaultExpectation == nil {
		mmChatExists.defaultExpectation = &ChatRepositoryMockChatExistsExpectation{}
	}

	if mmChatExists.defaultExpectation.params != nil {
		mmChatExists.mock.t.Fatalf("ChatRepositoryMock.ChatExists mock is already set by Expect")
	}

	if mmChatExists.defaultExpectation.paramPtrs == nil {
		mmChatExists.defaultExpectation.paramPtrs = &ChatRepositoryMockChatExistsParamPtrs{}
	}
	mmChatExists.defaultExpectation.paramPtrs.ctx = &ctx
	mmChatExists.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmChatExists
}

// ExpectIdParam2 sets up expected param id for ChatRepository.ChatExists
func (mmChatExists *mChatRepositoryMockChatExists) ExpectIdParam2(id int64) *mChatRepositoryMockChatExists {
	if mmChatExists.mock.funcChatExists != nil {
		mmChatExists.mock.t.Fatalf("ChatRepositoryMock.ChatExists mock is already set by Set")
	}

	if mmChatExists.defaultExpectation == nil {
		mmChatExists.defaultExpectation = &ChatRepositoryMockChatExistsExpectation{}
	}

	if mmChatExists.defaultExpectation.params != nil {
		mmChatExists.mock.t.Fatalf("ChatRepositoryMock.ChatExists mock is already set by Expect")
	}

	if mmChatExists.defaultExpectation.paramPtrs == nil {
		mmChatExists.defaultExpectation.paramPtrs = &ChatRepositoryMockChatExistsParamPtrs{}
	}
	mmChatExists.defaultExpectation.paramPtrs.id = &id
	mmChatExists.defaultExpectation.expectationOrigins.originId = minimock.CallerInfo(1)

	return mmChatExists
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.ChatExists
func (mmChatExists *mChatRepositoryMockChatExists) Inspect(f func(ctx context.Context, id int64)) *mChatRepositoryMockChatExists {
	if mmChatExists.mock.inspectFuncChatExists != nil {
		mmChatExists.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.ChatExists")
	}

	mmChatExists.mock.inspectFuncChatExists = f

	return mmChatExists
}

// Return sets up results that will be returned by ChatRepository.ChatExists
func (mmChatExists *mChatRepositoryMockChatExists) Return(b1 bool, err error) *ChatRepositoryMock {
	if mmChatExists.mock.funcChatExists != nil {
		mmChatExists.mock.t.Fatalf("ChatRepositoryMock.ChatExists mock is already set by Set")
	}

	if mmChatExists.defaultExpectation == nil {
		mmChatExists.defaultExpectation = &ChatRepositoryMockChatExistsExpectation{mock: mmChatExists.mock}
	}
	mmChatExists.defaultExpectation.results = &ChatRepositoryMockChatExistsResults{b1, err}
	mmChatExists.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmChatExists.mock
}

// Set uses given function f to mock the ChatRepository.ChatExists method
func (mmChatExists *mChatRepositoryMockChatExists) Set(f func(ctx context.Context, id int64) (b1 bool, err error)) *ChatRepositoryMock {
	if mmChatExists.defaultExpectation != nil {
		mmChatExists.mock.t.Fatalf("Default expectation is already set for the ChatRepository.ChatExists method")
	}

	if len(mmChatExists.expectations) > 0 {
		mmChatExists.mock.t.Fatalf("Some expectations are already set for the ChatRepository.ChatExists method")
	}

	mmChatExists.mock.funcChatExists = f
	mmChatExists.mock.funcChatExistsOrigin = minimock.CallerInfo(1)
	return mmChatExists.mock
}

// When sets expectation for the ChatRepository.ChatExists which will trigger the result defined by the following
// Then helper
func (mmChatExists *mChatRepositoryMockChatExists) When(ctx context.Context, id int64) *ChatRepositoryMockChatExistsExpectation {
	if mmChatExists.mock.funcChatExists != nil {
		mmChatExists.mock.t.Fatalf("ChatRepositoryMock.ChatExists mock is already set by Set")
	}

	expectation := &ChatRepositoryMockChatExistsExpectation{
		mock:               mmChatExists.mock,
		params:             &ChatRepositoryMockChatExistsParams{ctx, id},
		expectationOrigins: ChatRepositoryMockChatExistsExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmChatExists.expectations = append(mmChatExists.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.ChatExists return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockChatExistsExpectation) Then(b1 bool, err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockChatExistsResults{b1, err}
	return e.mock
}

// Times sets number of times ChatRepository.ChatExists should be invoked
func (mmChatExists *mChatRepositoryMockChatExists) Times(n uint64) *mChatRepositoryMockChatExists {
	if n == 0 {
		mmChatExists.mock.t.Fatalf("Times of ChatRepositoryMock.ChatExists mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmChatExists.expectedInvocations, n)
	mmChatExists.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmChatExists
}

func (mmChatExists *mChatRepositoryMockChatExists) invocationsDone() bool {
	if len(mmChatExists.expectations) == 0 && mmChatExists.defaultExpectation == nil && mmChatExists.mock.funcChatExists == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmChatExists.mock.afterChatExistsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmChatExists.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ChatExists implements mm_repository.ChatRepository
func (mmChatExists *ChatRepositoryMock) ChatExists(ctx context.Context, id int64) (b1 bool, err error) {
	mm_atomic.AddUint64(&mmChatExists.beforeChatExistsCounter, 1)
	defer mm_atomic.AddUint64(&mmChatExists.afterChatExistsCounter, 1)

	mmChatExists.t.Helper()

	if mmChatExists.inspectFuncChatExists != nil {
		mmChatExists.inspectFuncChatExists(ctx, id)
	}

	mm_params := ChatRepositoryMockChatExistsParams{ctx, id}

	// Record call args
	mmChatExists.ChatExistsMock.mutex.Lock()
	mmChatExists.ChatExistsMock.callArgs = append(mmChatExists.ChatExistsMock.callArgs, &mm_params)
	mmChatExists.ChatExistsMock.mutex.Unlock()

	for _, e := range mmChatExists.ChatExistsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.b1, e.results.err
		}
	}

	if mmChatExists.ChatExistsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmChatExists.ChatExistsMock.defaultExpectation.Counter, 1)
		mm_want := mmChatExists.ChatExistsMock.defaultExpectation.params
		mm_want_ptrs := mmChatExists.ChatExistsMock.defaultExpectation.paramPtrs

		mm_got := ChatRepositoryMockChatExistsParams{ctx, id}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmChatExists.t.Errorf("ChatRepositoryMock.ChatExists got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmChatExists.ChatExistsMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.id != nil && !minimock.Equal(*mm_want_ptrs.id, mm_got.id) {
				mmChatExists.t.Errorf("ChatRepositoryMock.ChatExists got unexpected parameter id, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmChatExists.ChatExistsMock.defaultExpectation.expectationOrigins.originId, *mm_want_ptrs.id, mm_got.id, minimock.Diff(*mm_want_ptrs.id, mm_got.id))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmChatExists.t.Errorf("ChatRepositoryMock.ChatExists got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmChatExists.ChatExistsMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmChatExists.ChatExistsMock.defaultExpectation.results
		if mm_results == nil {
			mmChatExists.t.Fatal("No results are set for the ChatRepositoryMock.ChatExists")
		}
		return (*mm_results).b1, (*mm_results).err
	}
	if mmChatExists.funcChatExists != nil {
		return mmChatExists.funcChatExists(ctx, id)
	}
	mmChatExists.t.Fatalf("Unexpected call to ChatRepositoryMock.ChatExists. %v %v", ctx, id)
	return
}

// ChatExistsAfterCounter returns a count of finished ChatRepositoryMock.ChatExists invocations
func (mmChatExists *ChatRepositoryMock) ChatExistsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmChatExists.afterChatExistsCounter)
}

// ChatExistsBeforeCounter returns a count of ChatRepositoryMock.ChatExists invocations
func (mmChatExists *ChatRepositoryMock) ChatExistsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmChatExists.beforeChatExistsCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.ChatExists.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmChatExists *mChatRepositoryMockChatExists) Calls() []*ChatRepositoryMockChatExistsParams {
	mmChatExists.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockChatExistsParams, len(mmChatExists.callArgs))
	copy(argCopy, mmChatExists.callArgs)

	mmChatExists.mutex.RUnlock()

	return argCopy
}

// MinimockChatExistsDone returns true if the count of the ChatExists invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockChatExistsDone() bool {
	if m.ChatExistsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ChatExistsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ChatExistsMock.invocationsDone()
}

// MinimockChatExistsInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockChatExistsInspect() {
	for _, e := range m.ChatExistsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.ChatExists at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterChatExistsCounter := mm_atomic.LoadUint64(&m.afterChatExistsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ChatExistsMock.defaultExpectation != nil && afterChatExistsCounter < 1 {
		if m.ChatExistsMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ChatRepositoryMock.ChatExists at\n%s", m.ChatExistsMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.ChatExists at\n%s with params: %#v", m.ChatExistsMock.defaultExpectation.expectationOrigins.origin, *m.ChatExistsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcChatExists != nil && afterChatExistsCounter < 1 {
		m.t.Errorf("Expected call to ChatRepositoryMock.ChatExists at\n%s", m.funcChatExistsOrigin)
	}

	if !m.ChatExistsMock.invocationsDone() && afterChatExistsCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatRepositoryMock.ChatExists at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ChatExistsMock.expectedInvocations), m.ChatExistsMock.expectedInvocationsOrigin, afterChatExistsCounter)
	}
}

type mChatRepositoryMockCreateChat struct {
	optional           bool
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockCreateChatExpectation
	expectations       []*ChatRepositoryMockCreateChatExpectation

	callArgs []*ChatRepositoryMockCreateChatParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ChatRepositoryMockCreateChatExpectation specifies expectation struct of the ChatRepository.CreateChat
type ChatRepositoryMockCreateChatExpectation struct {
	mock               *ChatRepositoryMock
	params             *ChatRepositoryMockCreateChatParams
	paramPtrs          *ChatRepositoryMockCreateChatParamPtrs
	expectationOrigins ChatRepositoryMockCreateChatExpectationOrigins
	results            *ChatRepositoryMockCreateChatResults
	returnOrigin       string
	Counter            uint64
}

// ChatRepositoryMockCreateChatParams contains parameters of the ChatRepository.CreateChat
type ChatRepositoryMockCreateChatParams struct {
	ctx  context.Context
	chat *model.Chat
}

// ChatRepositoryMockCreateChatParamPtrs contains pointers to parameters of the ChatRepository.CreateChat
type ChatRepositoryMockCreateChatParamPtrs struct {
	ctx  *context.Context
	chat **model.Chat
}

// ChatRepositoryMockCreateChatResults contains results of the ChatRepository.CreateChat
type ChatRepositoryMockCreateChatResults struct {
	i1  int64
	err error
}

// ChatRepositoryMockCreateChatOrigins contains origins of expectations of the ChatRepository.CreateChat
type ChatRepositoryMockCreateChatExpectationOrigins struct {
	origin     string
	originCtx  string
	originChat string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateChat *mChatRepositoryMockCreateChat) Optional() *mChatRepositoryMockCreateChat {
	mmCreateChat.optional = true
	return mmCreateChat
}

// Expect sets up expected params for ChatRepository.CreateChat
func (mmCreateChat *mChatRepositoryMockCreateChat) Expect(ctx context.Context, chat *model.Chat) *mChatRepositoryMockCreateChat {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &ChatRepositoryMockCreateChatExpectation{}
	}

	if mmCreateChat.defaultExpectation.paramPtrs != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by ExpectParams functions")
	}

	mmCreateChat.defaultExpectation.params = &ChatRepositoryMockCreateChatParams{ctx, chat}
	mmCreateChat.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreateChat.expectations {
		if minimock.Equal(e.params, mmCreateChat.defaultExpectation.params) {
			mmCreateChat.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateChat.defaultExpectation.params)
		}
	}

	return mmCreateChat
}

// ExpectCtxParam1 sets up expected param ctx for ChatRepository.CreateChat
func (mmCreateChat *mChatRepositoryMockCreateChat) ExpectCtxParam1(ctx context.Context) *mChatRepositoryMockCreateChat {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &ChatRepositoryMockCreateChatExpectation{}
	}

	if mmCreateChat.defaultExpectation.params != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Expect")
	}

	if mmCreateChat.defaultExpectation.paramPtrs == nil {
		mmCreateChat.defaultExpectation.paramPtrs = &ChatRepositoryMockCreateChatParamPtrs{}
	}
	mmCreateChat.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreateChat.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreateChat
}

// ExpectChatParam2 sets up expected param chat for ChatRepository.CreateChat
func (mmCreateChat *mChatRepositoryMockCreateChat) ExpectChatParam2(chat *model.Chat) *mChatRepositoryMockCreateChat {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &ChatRepositoryMockCreateChatExpectation{}
	}

	if mmCreateChat.defaultExpectation.params != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Expect")
	}

	if mmCreateChat.defaultExpectation.paramPtrs == nil {
		mmCreateChat.defaultExpectation.paramPtrs = &ChatRepositoryMockCreateChatParamPtrs{}
	}
	mmCreateChat.defaultExpectation.paramPtrs.chat = &chat
	mmCreateChat.defaultExpectation.expectationOrigins.originChat = minimock.CallerInfo(1)

	return mmCreateChat
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.CreateChat
func (mmCreateChat *mChatRepositoryMockCreateChat) Inspect(f func(ctx context.Context, chat *model.Chat)) *mChatRepositoryMockCreateChat {
	if mmCreateChat.mock.inspectFuncCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.CreateChat")
	}

	mmCreateChat.mock.inspectFuncCreateChat = f

	return mmCreateChat
}

// Return sets up results that will be returned by ChatRepository.CreateChat
func (mmCreateChat *mChatRepositoryMockCreateChat) Return(i1 int64, err error) *ChatRepositoryMock {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &ChatRepositoryMockCreateChatExpectation{mock: mmCreateChat.mock}
	}
	mmCreateChat.defaultExpectation.results = &ChatRepositoryMockCreateChatResults{i1, err}
	mmCreateChat.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreateChat.mock
}

// Set uses given function f to mock the ChatRepository.CreateChat method
func (mmCreateChat *mChatRepositoryMockCreateChat) Set(f func(ctx context.Context, chat *model.Chat) (i1 int64, err error)) *ChatRepositoryMock {
	if mmCreateChat.defaultExpectation != nil {
		mmCreateChat.mock.t.Fatalf("Default expectation is already set for the ChatRepository.CreateChat method")
	}

	if len(mmCreateChat.expectations) > 0 {
		mmCreateChat.mock.t.Fatalf("Some expectations are already set for the ChatRepository.CreateChat method")
	}

	mmCreateChat.mock.funcCreateChat = f
	mmCreateChat.mock.funcCreateChatOrigin = minimock.CallerInfo(1)
	return mmCreateChat.mock
}

// When sets expectation for the ChatRepository.CreateChat which will trigger the result defined by the following
// Then helper
func (mmCreateChat *mChatRepositoryMockCreateChat) When(ctx context.Context, chat *model.Chat) *ChatRepositoryMockCreateChatExpectation {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Set")
	}

	expectation := &ChatRepositoryMockCreateChatExpectation{
		mock:               mmCreateChat.mock,
		params:             &ChatRepositoryMockCreateChatParams{ctx, chat},
		expectationOrigins: ChatRepositoryMockCreateChatExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreateChat.expectations = append(mmCreateChat.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.CreateChat return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockCreateChatExpectation) Then(i1 int64, err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockCreateChatResults{i1, err}
	return e.mock
}

// Times sets number of times ChatRepository.CreateChat should be invoked
func (mmCreateChat *mChatRepositoryMockCreateChat) Times(n uint64) *mChatRepositoryMockCreateChat {
	if n == 0 {
		mmCreateChat.mock.t.Fatalf("Times of ChatRepositoryMock.CreateChat mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateChat.expectedInvocations, n)
	mmCreateChat.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreateChat
}

func (mmCreateChat *mChatRepositoryMockCreateChat) invocationsDone() bool {
	if len(mmCreateChat.expectations) == 0 && mmCreateChat.defaultExpectation == nil && mmCreateChat.mock.funcCreateChat == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateChat.mock.afterCreateChatCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateChat.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateChat implements mm_repository.ChatRepository
func (mmCreateChat *ChatRepositoryMock) CreateChat(ctx context.Context, chat *model.Chat) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmCreateChat.beforeCreateChatCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateChat.afterCreateChatCounter, 1)

	mmCreateChat.t.Helper()

	if mmCreateChat.inspectFuncCreateChat != nil {
		mmCreateChat.inspectFuncCreateChat(ctx, chat)
	}

	mm_params := ChatRepositoryMockCreateChatParams{ctx, chat}

	// Record call args
	mmCreateChat.CreateChatMock.mutex.Lock()
	mmCreateChat.CreateChatMock.callArgs = append(mmCreateChat.CreateChatMock.callArgs, &mm_params)
	mmCreateChat.CreateChatMock.mutex.Unlock()

	for _, e := range mmCreateChat.CreateChatMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCreateChat.CreateChatMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateChat.CreateChatMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateChat.CreateChatMock.defaultExpectation.params
		mm_want_ptrs := mmCreateChat.CreateChatMock.defaultExpectation.paramPtrs

		mm_got := ChatRepositoryMockCreateChatParams{ctx, chat}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateChat.t.Errorf("ChatRepositoryMock.CreateChat got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateChat.CreateChatMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.chat != nil && !minimock.Equal(*mm_want_ptrs.chat, mm_got.chat) {
				mmCreateChat.t.Errorf("ChatRepositoryMock.CreateChat got unexpected parameter chat, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateChat.CreateChatMock.defaultExpectation.expectationOrigins.originChat, *mm_want_ptrs.chat, mm_got.chat, minimock.Diff(*mm_want_ptrs.chat, mm_got.chat))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateChat.t.Errorf("ChatRepositoryMock.CreateChat got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreateChat.CreateChatMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateChat.CreateChatMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateChat.t.Fatal("No results are set for the ChatRepositoryMock.CreateChat")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCreateChat.funcCreateChat != nil {
		return mmCreateChat.funcCreateChat(ctx, chat)
	}
	mmCreateChat.t.Fatalf("Unexpected call to ChatRepositoryMock.CreateChat. %v %v", ctx, chat)
	return
}

// CreateChatAfterCounter returns a count of finished ChatRepositoryMock.CreateChat invocations
func (mmCreateChat *ChatRepositoryMock) CreateChatAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateChat.afterCreateChatCounter)
}

// CreateChatBeforeCounter returns a count of ChatRepositoryMock.CreateChat invocations
func (mmCreateChat *ChatRepositoryMock) CreateChatBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateChat.beforeCreateChatCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.CreateChat.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateChat *mChatRepositoryMockCreateChat) Calls() []*ChatRepositoryMockCreateChatParams {
	mmCreateChat.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockCreateChatParams, len(mmCreateChat.callArgs))
	copy(argCopy, mmCreateChat.callArgs)

	mmCreateChat.mutex.RUnlock()

	return argCopy
}

// MinimockCreateChatDone returns true if the count of the CreateChat invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockCreateChatDone() bool {
	if m.CreateChatMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateChatMock.invocationsDone()
}

// MinimockCreateChatInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockCreateChatInspect() {
	for _, e := range m.CreateChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.CreateChat at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateChatCounter := mm_atomic.LoadUint64(&m.afterCreateChatCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateChatMock.defaultExpectation != nil && afterCreateChatCounter < 1 {
		if m.CreateChatMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ChatRepositoryMock.CreateChat at\n%s", m.CreateChatMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.CreateChat at\n%s with params: %#v", m.CreateChatMock.defaultExpectation.expectationOrigins.origin, *m.CreateChatMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateChat != nil && afterCreateChatCounter < 1 {
		m.t.Errorf("Expected call to ChatRepositoryMock.CreateChat at\n%s", m.funcCreateChatOrigin)
	}

	if !m.CreateChatMock.invocationsDone() && afterCreateChatCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatRepositoryMock.CreateChat at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateChatMock.expectedInvocations), m.CreateChatMock.expectedInvocationsOrigin, afterCreateChatCounter)
	}
}

type mChatRepositoryMockCreateMessage struct {
	optional           bool
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockCreateMessageExpectation
	expectations       []*ChatRepositoryMockCreateMessageExpectation

	callArgs []*ChatRepositoryMockCreateMessageParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ChatRepositoryMockCreateMessageExpectation specifies expectation struct of the ChatRepository.CreateMessage
type ChatRepositoryMockCreateMessageExpectation struct {
	mock               *ChatRepositoryMock
	params             *ChatRepositoryMockCreateMessageParams
	paramPtrs          *ChatRepositoryMockCreateMessageParamPtrs
	expectationOrigins ChatRepositoryMockCreateMessageExpectationOrigins
	results            *ChatRepositoryMockCreateMessageResults
	returnOrigin       string
	Counter            uint64
}

// ChatRepositoryMockCreateMessageParams contains parameters of the ChatRepository.CreateMessage
type ChatRepositoryMockCreateMessageParams struct {
	ctx     context.Context
	message *model.MessageInfo
}

// ChatRepositoryMockCreateMessageParamPtrs contains pointers to parameters of the ChatRepository.CreateMessage
type ChatRepositoryMockCreateMessageParamPtrs struct {
	ctx     *context.Context
	message **model.MessageInfo
}

// ChatRepositoryMockCreateMessageResults contains results of the ChatRepository.CreateMessage
type ChatRepositoryMockCreateMessageResults struct {
	err error
}

// ChatRepositoryMockCreateMessageOrigins contains origins of expectations of the ChatRepository.CreateMessage
type ChatRepositoryMockCreateMessageExpectationOrigins struct {
	origin        string
	originCtx     string
	originMessage string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateMessage *mChatRepositoryMockCreateMessage) Optional() *mChatRepositoryMockCreateMessage {
	mmCreateMessage.optional = true
	return mmCreateMessage
}

// Expect sets up expected params for ChatRepository.CreateMessage
func (mmCreateMessage *mChatRepositoryMockCreateMessage) Expect(ctx context.Context, message *model.MessageInfo) *mChatRepositoryMockCreateMessage {
	if mmCreateMessage.mock.funcCreateMessage != nil {
		mmCreateMessage.mock.t.Fatalf("ChatRepositoryMock.CreateMessage mock is already set by Set")
	}

	if mmCreateMessage.defaultExpectation == nil {
		mmCreateMessage.defaultExpectation = &ChatRepositoryMockCreateMessageExpectation{}
	}

	if mmCreateMessage.defaultExpectation.paramPtrs != nil {
		mmCreateMessage.mock.t.Fatalf("ChatRepositoryMock.CreateMessage mock is already set by ExpectParams functions")
	}

	mmCreateMessage.defaultExpectation.params = &ChatRepositoryMockCreateMessageParams{ctx, message}
	mmCreateMessage.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreateMessage.expectations {
		if minimock.Equal(e.params, mmCreateMessage.defaultExpectation.params) {
			mmCreateMessage.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateMessage.defaultExpectation.params)
		}
	}

	return mmCreateMessage
}

// ExpectCtxParam1 sets up expected param ctx for ChatRepository.CreateMessage
func (mmCreateMessage *mChatRepositoryMockCreateMessage) ExpectCtxParam1(ctx context.Context) *mChatRepositoryMockCreateMessage {
	if mmCreateMessage.mock.funcCreateMessage != nil {
		mmCreateMessage.mock.t.Fatalf("ChatRepositoryMock.CreateMessage mock is already set by Set")
	}

	if mmCreateMessage.defaultExpectation == nil {
		mmCreateMessage.defaultExpectation = &ChatRepositoryMockCreateMessageExpectation{}
	}

	if mmCreateMessage.defaultExpectation.params != nil {
		mmCreateMessage.mock.t.Fatalf("ChatRepositoryMock.CreateMessage mock is already set by Expect")
	}

	if mmCreateMessage.defaultExpectation.paramPtrs == nil {
		mmCreateMessage.defaultExpectation.paramPtrs = &ChatRepositoryMockCreateMessageParamPtrs{}
	}
	mmCreateMessage.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreateMessage.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreateMessage
}

// ExpectMessageParam2 sets up expected param message for ChatRepository.CreateMessage
func (mmCreateMessage *mChatRepositoryMockCreateMessage) ExpectMessageParam2(message *model.MessageInfo) *mChatRepositoryMockCreateMessage {
	if mmCreateMessage.mock.funcCreateMessage != nil {
		mmCreateMessage.mock.t.Fatalf("ChatRepositoryMock.CreateMessage mock is already set by Set")
	}

	if mmCreateMessage.defaultExpectation == nil {
		mmCreateMessage.defaultExpectation = &ChatRepositoryMockCreateMessageExpectation{}
	}

	if mmCreateMessage.defaultExpectation.params != nil {
		mmCreateMessage.mock.t.Fatalf("ChatRepositoryMock.CreateMessage mock is already set by Expect")
	}

	if mmCreateMessage.defaultExpectation.paramPtrs == nil {
		mmCreateMessage.defaultExpectation.paramPtrs = &ChatRepositoryMockCreateMessageParamPtrs{}
	}
	mmCreateMessage.defaultExpectation.paramPtrs.message = &message
	mmCreateMessage.defaultExpectation.expectationOrigins.originMessage = minimock.CallerInfo(1)

	return mmCreateMessage
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.CreateMessage
func (mmCreateMessage *mChatRepositoryMockCreateMessage) Inspect(f func(ctx context.Context, message *model.MessageInfo)) *mChatRepositoryMockCreateMessage {
	if mmCreateMessage.mock.inspectFuncCreateMessage != nil {
		mmCreateMessage.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.CreateMessage")
	}

	mmCreateMessage.mock.inspectFuncCreateMessage = f

	return mmCreateMessage
}

// Return sets up results that will be returned by ChatRepository.CreateMessage
func (mmCreateMessage *mChatRepositoryMockCreateMessage) Return(err error) *ChatRepositoryMock {
	if mmCreateMessage.mock.funcCreateMessage != nil {
		mmCreateMessage.mock.t.Fatalf("ChatRepositoryMock.CreateMessage mock is already set by Set")
	}

	if mmCreateMessage.defaultExpectation == nil {
		mmCreateMessage.defaultExpectation = &ChatRepositoryMockCreateMessageExpectation{mock: mmCreateMessage.mock}
	}
	mmCreateMessage.defaultExpectation.results = &ChatRepositoryMockCreateMessageResults{err}
	mmCreateMessage.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreateMessage.mock
}

// Set uses given function f to mock the ChatRepository.CreateMessage method
func (mmCreateMessage *mChatRepositoryMockCreateMessage) Set(f func(ctx context.Context, message *model.MessageInfo) (err error)) *ChatRepositoryMock {
	if mmCreateMessage.defaultExpectation != nil {
		mmCreateMessage.mock.t.Fatalf("Default expectation is already set for the ChatRepository.CreateMessage method")
	}

	if len(mmCreateMessage.expectations) > 0 {
		mmCreateMessage.mock.t.Fatalf("Some expectations are already set for the ChatRepository.CreateMessage method")
	}

	mmCreateMessage.mock.funcCreateMessage = f
	mmCreateMessage.mock.funcCreateMessageOrigin = minimock.CallerInfo(1)
	return mmCreateMessage.mock
}

// When sets expectation for the ChatRepository.CreateMessage which will trigger the result defined by the following
// Then helper
func (mmCreateMessage *mChatRepositoryMockCreateMessage) When(ctx context.Context, message *model.MessageInfo) *ChatRepositoryMockCreateMessageExpectation {
	if mmCreateMessage.mock.funcCreateMessage != nil {
		mmCreateMessage.mock.t.Fatalf("ChatRepositoryMock.CreateMessage mock is already set by Set")
	}

	expectation := &ChatRepositoryMockCreateMessageExpectation{
		mock:               mmCreateMessage.mock,
		params:             &ChatRepositoryMockCreateMessageParams{ctx, message},
		expectationOrigins: ChatRepositoryMockCreateMessageExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreateMessage.expectations = append(mmCreateMessage.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.CreateMessage return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockCreateMessageExpectation) Then(err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockCreateMessageResults{err}
	return e.mock
}

// Times sets number of times ChatRepository.CreateMessage should be invoked
func (mmCreateMessage *mChatRepositoryMockCreateMessage) Times(n uint64) *mChatRepositoryMockCreateMessage {
	if n == 0 {
		mmCreateMessage.mock.t.Fatalf("Times of ChatRepositoryMock.CreateMessage mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateMessage.expectedInvocations, n)
	mmCreateMessage.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreateMessage
}

func (mmCreateMessage *mChatRepositoryMockCreateMessage) invocationsDone() bool {
	if len(mmCreateMessage.expectations) == 0 && mmCreateMessage.defaultExpectation == nil && mmCreateMessage.mock.funcCreateMessage == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateMessage.mock.afterCreateMessageCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateMessage.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateMessage implements mm_repository.ChatRepository
func (mmCreateMessage *ChatRepositoryMock) CreateMessage(ctx context.Context, message *model.MessageInfo) (err error) {
	mm_atomic.AddUint64(&mmCreateMessage.beforeCreateMessageCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateMessage.afterCreateMessageCounter, 1)

	mmCreateMessage.t.Helper()

	if mmCreateMessage.inspectFuncCreateMessage != nil {
		mmCreateMessage.inspectFuncCreateMessage(ctx, message)
	}

	mm_params := ChatRepositoryMockCreateMessageParams{ctx, message}

	// Record call args
	mmCreateMessage.CreateMessageMock.mutex.Lock()
	mmCreateMessage.CreateMessageMock.callArgs = append(mmCreateMessage.CreateMessageMock.callArgs, &mm_params)
	mmCreateMessage.CreateMessageMock.mutex.Unlock()

	for _, e := range mmCreateMessage.CreateMessageMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmCreateMessage.CreateMessageMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateMessage.CreateMessageMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateMessage.CreateMessageMock.defaultExpectation.params
		mm_want_ptrs := mmCreateMessage.CreateMessageMock.defaultExpectation.paramPtrs

		mm_got := ChatRepositoryMockCreateMessageParams{ctx, message}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateMessage.t.Errorf("ChatRepositoryMock.CreateMessage got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateMessage.CreateMessageMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.message != nil && !minimock.Equal(*mm_want_ptrs.message, mm_got.message) {
				mmCreateMessage.t.Errorf("ChatRepositoryMock.CreateMessage got unexpected parameter message, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateMessage.CreateMessageMock.defaultExpectation.expectationOrigins.originMessage, *mm_want_ptrs.message, mm_got.message, minimock.Diff(*mm_want_ptrs.message, mm_got.message))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateMessage.t.Errorf("ChatRepositoryMock.CreateMessage got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreateMessage.CreateMessageMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateMessage.CreateMessageMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateMessage.t.Fatal("No results are set for the ChatRepositoryMock.CreateMessage")
		}
		return (*mm_results).err
	}
	if mmCreateMessage.funcCreateMessage != nil {
		return mmCreateMessage.funcCreateMessage(ctx, message)
	}
	mmCreateMessage.t.Fatalf("Unexpected call to ChatRepositoryMock.CreateMessage. %v %v", ctx, message)
	return
}

// CreateMessageAfterCounter returns a count of finished ChatRepositoryMock.CreateMessage invocations
func (mmCreateMessage *ChatRepositoryMock) CreateMessageAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateMessage.afterCreateMessageCounter)
}

// CreateMessageBeforeCounter returns a count of ChatRepositoryMock.CreateMessage invocations
func (mmCreateMessage *ChatRepositoryMock) CreateMessageBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateMessage.beforeCreateMessageCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.CreateMessage.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateMessage *mChatRepositoryMockCreateMessage) Calls() []*ChatRepositoryMockCreateMessageParams {
	mmCreateMessage.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockCreateMessageParams, len(mmCreateMessage.callArgs))
	copy(argCopy, mmCreateMessage.callArgs)

	mmCreateMessage.mutex.RUnlock()

	return argCopy
}

// MinimockCreateMessageDone returns true if the count of the CreateMessage invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockCreateMessageDone() bool {
	if m.CreateMessageMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateMessageMock.invocationsDone()
}

// MinimockCreateMessageInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockCreateMessageInspect() {
	for _, e := range m.CreateMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.CreateMessage at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateMessageCounter := mm_atomic.LoadUint64(&m.afterCreateMessageCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMessageMock.defaultExpectation != nil && afterCreateMessageCounter < 1 {
		if m.CreateMessageMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ChatRepositoryMock.CreateMessage at\n%s", m.CreateMessageMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.CreateMessage at\n%s with params: %#v", m.CreateMessageMock.defaultExpectation.expectationOrigins.origin, *m.CreateMessageMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateMessage != nil && afterCreateMessageCounter < 1 {
		m.t.Errorf("Expected call to ChatRepositoryMock.CreateMessage at\n%s", m.funcCreateMessageOrigin)
	}

	if !m.CreateMessageMock.invocationsDone() && afterCreateMessageCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatRepositoryMock.CreateMessage at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateMessageMock.expectedInvocations), m.CreateMessageMock.expectedInvocationsOrigin, afterCreateMessageCounter)
	}
}

type mChatRepositoryMockCreateRoster struct {
	optional           bool
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockCreateRosterExpectation
	expectations       []*ChatRepositoryMockCreateRosterExpectation

	callArgs []*ChatRepositoryMockCreateRosterParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ChatRepositoryMockCreateRosterExpectation specifies expectation struct of the ChatRepository.CreateRoster
type ChatRepositoryMockCreateRosterExpectation struct {
	mock               *ChatRepositoryMock
	params             *ChatRepositoryMockCreateRosterParams
	paramPtrs          *ChatRepositoryMockCreateRosterParamPtrs
	expectationOrigins ChatRepositoryMockCreateRosterExpectationOrigins
	results            *ChatRepositoryMockCreateRosterResults
	returnOrigin       string
	Counter            uint64
}

// ChatRepositoryMockCreateRosterParams contains parameters of the ChatRepository.CreateRoster
type ChatRepositoryMockCreateRosterParams struct {
	ctx     context.Context
	chatID  int64
	UserIDs []int64
}

// ChatRepositoryMockCreateRosterParamPtrs contains pointers to parameters of the ChatRepository.CreateRoster
type ChatRepositoryMockCreateRosterParamPtrs struct {
	ctx     *context.Context
	chatID  *int64
	UserIDs *[]int64
}

// ChatRepositoryMockCreateRosterResults contains results of the ChatRepository.CreateRoster
type ChatRepositoryMockCreateRosterResults struct {
	err error
}

// ChatRepositoryMockCreateRosterOrigins contains origins of expectations of the ChatRepository.CreateRoster
type ChatRepositoryMockCreateRosterExpectationOrigins struct {
	origin        string
	originCtx     string
	originChatID  string
	originUserIDs string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateRoster *mChatRepositoryMockCreateRoster) Optional() *mChatRepositoryMockCreateRoster {
	mmCreateRoster.optional = true
	return mmCreateRoster
}

// Expect sets up expected params for ChatRepository.CreateRoster
func (mmCreateRoster *mChatRepositoryMockCreateRoster) Expect(ctx context.Context, chatID int64, UserIDs []int64) *mChatRepositoryMockCreateRoster {
	if mmCreateRoster.mock.funcCreateRoster != nil {
		mmCreateRoster.mock.t.Fatalf("ChatRepositoryMock.CreateRoster mock is already set by Set")
	}

	if mmCreateRoster.defaultExpectation == nil {
		mmCreateRoster.defaultExpectation = &ChatRepositoryMockCreateRosterExpectation{}
	}

	if mmCreateRoster.defaultExpectation.paramPtrs != nil {
		mmCreateRoster.mock.t.Fatalf("ChatRepositoryMock.CreateRoster mock is already set by ExpectParams functions")
	}

	mmCreateRoster.defaultExpectation.params = &ChatRepositoryMockCreateRosterParams{ctx, chatID, UserIDs}
	mmCreateRoster.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreateRoster.expectations {
		if minimock.Equal(e.params, mmCreateRoster.defaultExpectation.params) {
			mmCreateRoster.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateRoster.defaultExpectation.params)
		}
	}

	return mmCreateRoster
}

// ExpectCtxParam1 sets up expected param ctx for ChatRepository.CreateRoster
func (mmCreateRoster *mChatRepositoryMockCreateRoster) ExpectCtxParam1(ctx context.Context) *mChatRepositoryMockCreateRoster {
	if mmCreateRoster.mock.funcCreateRoster != nil {
		mmCreateRoster.mock.t.Fatalf("ChatRepositoryMock.CreateRoster mock is already set by Set")
	}

	if mmCreateRoster.defaultExpectation == nil {
		mmCreateRoster.defaultExpectation = &ChatRepositoryMockCreateRosterExpectation{}
	}

	if mmCreateRoster.defaultExpectation.params != nil {
		mmCreateRoster.mock.t.Fatalf("ChatRepositoryMock.CreateRoster mock is already set by Expect")
	}

	if mmCreateRoster.defaultExpectation.paramPtrs == nil {
		mmCreateRoster.defaultExpectation.paramPtrs = &ChatRepositoryMockCreateRosterParamPtrs{}
	}
	mmCreateRoster.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreateRoster.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreateRoster
}

// ExpectChatIDParam2 sets up expected param chatID for ChatRepository.CreateRoster
func (mmCreateRoster *mChatRepositoryMockCreateRoster) ExpectChatIDParam2(chatID int64) *mChatRepositoryMockCreateRoster {
	if mmCreateRoster.mock.funcCreateRoster != nil {
		mmCreateRoster.mock.t.Fatalf("ChatRepositoryMock.CreateRoster mock is already set by Set")
	}

	if mmCreateRoster.defaultExpectation == nil {
		mmCreateRoster.defaultExpectation = &ChatRepositoryMockCreateRosterExpectation{}
	}

	if mmCreateRoster.defaultExpectation.params != nil {
		mmCreateRoster.mock.t.Fatalf("ChatRepositoryMock.CreateRoster mock is already set by Expect")
	}

	if mmCreateRoster.defaultExpectation.paramPtrs == nil {
		mmCreateRoster.defaultExpectation.paramPtrs = &ChatRepositoryMockCreateRosterParamPtrs{}
	}
	mmCreateRoster.defaultExpectation.paramPtrs.chatID = &chatID
	mmCreateRoster.defaultExpectation.expectationOrigins.originChatID = minimock.CallerInfo(1)

	return mmCreateRoster
}

// ExpectUserIDsParam3 sets up expected param UserIDs for ChatRepository.CreateRoster
func (mmCreateRoster *mChatRepositoryMockCreateRoster) ExpectUserIDsParam3(UserIDs []int64) *mChatRepositoryMockCreateRoster {
	if mmCreateRoster.mock.funcCreateRoster != nil {
		mmCreateRoster.mock.t.Fatalf("ChatRepositoryMock.CreateRoster mock is already set by Set")
	}

	if mmCreateRoster.defaultExpectation == nil {
		mmCreateRoster.defaultExpectation = &ChatRepositoryMockCreateRosterExpectation{}
	}

	if mmCreateRoster.defaultExpectation.params != nil {
		mmCreateRoster.mock.t.Fatalf("ChatRepositoryMock.CreateRoster mock is already set by Expect")
	}

	if mmCreateRoster.defaultExpectation.paramPtrs == nil {
		mmCreateRoster.defaultExpectation.paramPtrs = &ChatRepositoryMockCreateRosterParamPtrs{}
	}
	mmCreateRoster.defaultExpectation.paramPtrs.UserIDs = &UserIDs
	mmCreateRoster.defaultExpectation.expectationOrigins.originUserIDs = minimock.CallerInfo(1)

	return mmCreateRoster
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.CreateRoster
func (mmCreateRoster *mChatRepositoryMockCreateRoster) Inspect(f func(ctx context.Context, chatID int64, UserIDs []int64)) *mChatRepositoryMockCreateRoster {
	if mmCreateRoster.mock.inspectFuncCreateRoster != nil {
		mmCreateRoster.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.CreateRoster")
	}

	mmCreateRoster.mock.inspectFuncCreateRoster = f

	return mmCreateRoster
}

// Return sets up results that will be returned by ChatRepository.CreateRoster
func (mmCreateRoster *mChatRepositoryMockCreateRoster) Return(err error) *ChatRepositoryMock {
	if mmCreateRoster.mock.funcCreateRoster != nil {
		mmCreateRoster.mock.t.Fatalf("ChatRepositoryMock.CreateRoster mock is already set by Set")
	}

	if mmCreateRoster.defaultExpectation == nil {
		mmCreateRoster.defaultExpectation = &ChatRepositoryMockCreateRosterExpectation{mock: mmCreateRoster.mock}
	}
	mmCreateRoster.defaultExpectation.results = &ChatRepositoryMockCreateRosterResults{err}
	mmCreateRoster.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreateRoster.mock
}

// Set uses given function f to mock the ChatRepository.CreateRoster method
func (mmCreateRoster *mChatRepositoryMockCreateRoster) Set(f func(ctx context.Context, chatID int64, UserIDs []int64) (err error)) *ChatRepositoryMock {
	if mmCreateRoster.defaultExpectation != nil {
		mmCreateRoster.mock.t.Fatalf("Default expectation is already set for the ChatRepository.CreateRoster method")
	}

	if len(mmCreateRoster.expectations) > 0 {
		mmCreateRoster.mock.t.Fatalf("Some expectations are already set for the ChatRepository.CreateRoster method")
	}

	mmCreateRoster.mock.funcCreateRoster = f
	mmCreateRoster.mock.funcCreateRosterOrigin = minimock.CallerInfo(1)
	return mmCreateRoster.mock
}

// When sets expectation for the ChatRepository.CreateRoster which will trigger the result defined by the following
// Then helper
func (mmCreateRoster *mChatRepositoryMockCreateRoster) When(ctx context.Context, chatID int64, UserIDs []int64) *ChatRepositoryMockCreateRosterExpectation {
	if mmCreateRoster.mock.funcCreateRoster != nil {
		mmCreateRoster.mock.t.Fatalf("ChatRepositoryMock.CreateRoster mock is already set by Set")
	}

	expectation := &ChatRepositoryMockCreateRosterExpectation{
		mock:               mmCreateRoster.mock,
		params:             &ChatRepositoryMockCreateRosterParams{ctx, chatID, UserIDs},
		expectationOrigins: ChatRepositoryMockCreateRosterExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreateRoster.expectations = append(mmCreateRoster.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.CreateRoster return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockCreateRosterExpectation) Then(err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockCreateRosterResults{err}
	return e.mock
}

// Times sets number of times ChatRepository.CreateRoster should be invoked
func (mmCreateRoster *mChatRepositoryMockCreateRoster) Times(n uint64) *mChatRepositoryMockCreateRoster {
	if n == 0 {
		mmCreateRoster.mock.t.Fatalf("Times of ChatRepositoryMock.CreateRoster mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateRoster.expectedInvocations, n)
	mmCreateRoster.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreateRoster
}

func (mmCreateRoster *mChatRepositoryMockCreateRoster) invocationsDone() bool {
	if len(mmCreateRoster.expectations) == 0 && mmCreateRoster.defaultExpectation == nil && mmCreateRoster.mock.funcCreateRoster == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateRoster.mock.afterCreateRosterCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateRoster.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateRoster implements mm_repository.ChatRepository
func (mmCreateRoster *ChatRepositoryMock) CreateRoster(ctx context.Context, chatID int64, UserIDs []int64) (err error) {
	mm_atomic.AddUint64(&mmCreateRoster.beforeCreateRosterCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateRoster.afterCreateRosterCounter, 1)

	mmCreateRoster.t.Helper()

	if mmCreateRoster.inspectFuncCreateRoster != nil {
		mmCreateRoster.inspectFuncCreateRoster(ctx, chatID, UserIDs)
	}

	mm_params := ChatRepositoryMockCreateRosterParams{ctx, chatID, UserIDs}

	// Record call args
	mmCreateRoster.CreateRosterMock.mutex.Lock()
	mmCreateRoster.CreateRosterMock.callArgs = append(mmCreateRoster.CreateRosterMock.callArgs, &mm_params)
	mmCreateRoster.CreateRosterMock.mutex.Unlock()

	for _, e := range mmCreateRoster.CreateRosterMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmCreateRoster.CreateRosterMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateRoster.CreateRosterMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateRoster.CreateRosterMock.defaultExpectation.params
		mm_want_ptrs := mmCreateRoster.CreateRosterMock.defaultExpectation.paramPtrs

		mm_got := ChatRepositoryMockCreateRosterParams{ctx, chatID, UserIDs}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateRoster.t.Errorf("ChatRepositoryMock.CreateRoster got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateRoster.CreateRosterMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.chatID != nil && !minimock.Equal(*mm_want_ptrs.chatID, mm_got.chatID) {
				mmCreateRoster.t.Errorf("ChatRepositoryMock.CreateRoster got unexpected parameter chatID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateRoster.CreateRosterMock.defaultExpectation.expectationOrigins.originChatID, *mm_want_ptrs.chatID, mm_got.chatID, minimock.Diff(*mm_want_ptrs.chatID, mm_got.chatID))
			}

			if mm_want_ptrs.UserIDs != nil && !minimock.Equal(*mm_want_ptrs.UserIDs, mm_got.UserIDs) {
				mmCreateRoster.t.Errorf("ChatRepositoryMock.CreateRoster got unexpected parameter UserIDs, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateRoster.CreateRosterMock.defaultExpectation.expectationOrigins.originUserIDs, *mm_want_ptrs.UserIDs, mm_got.UserIDs, minimock.Diff(*mm_want_ptrs.UserIDs, mm_got.UserIDs))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateRoster.t.Errorf("ChatRepositoryMock.CreateRoster got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreateRoster.CreateRosterMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateRoster.CreateRosterMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateRoster.t.Fatal("No results are set for the ChatRepositoryMock.CreateRoster")
		}
		return (*mm_results).err
	}
	if mmCreateRoster.funcCreateRoster != nil {
		return mmCreateRoster.funcCreateRoster(ctx, chatID, UserIDs)
	}
	mmCreateRoster.t.Fatalf("Unexpected call to ChatRepositoryMock.CreateRoster. %v %v %v", ctx, chatID, UserIDs)
	return
}

// CreateRosterAfterCounter returns a count of finished ChatRepositoryMock.CreateRoster invocations
func (mmCreateRoster *ChatRepositoryMock) CreateRosterAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateRoster.afterCreateRosterCounter)
}

// CreateRosterBeforeCounter returns a count of ChatRepositoryMock.CreateRoster invocations
func (mmCreateRoster *ChatRepositoryMock) CreateRosterBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateRoster.beforeCreateRosterCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.CreateRoster.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateRoster *mChatRepositoryMockCreateRoster) Calls() []*ChatRepositoryMockCreateRosterParams {
	mmCreateRoster.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockCreateRosterParams, len(mmCreateRoster.callArgs))
	copy(argCopy, mmCreateRoster.callArgs)

	mmCreateRoster.mutex.RUnlock()

	return argCopy
}

// MinimockCreateRosterDone returns true if the count of the CreateRoster invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockCreateRosterDone() bool {
	if m.CreateRosterMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateRosterMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateRosterMock.invocationsDone()
}

// MinimockCreateRosterInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockCreateRosterInspect() {
	for _, e := range m.CreateRosterMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.CreateRoster at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateRosterCounter := mm_atomic.LoadUint64(&m.afterCreateRosterCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateRosterMock.defaultExpectation != nil && afterCreateRosterCounter < 1 {
		if m.CreateRosterMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ChatRepositoryMock.CreateRoster at\n%s", m.CreateRosterMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.CreateRoster at\n%s with params: %#v", m.CreateRosterMock.defaultExpectation.expectationOrigins.origin, *m.CreateRosterMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateRoster != nil && afterCreateRosterCounter < 1 {
		m.t.Errorf("Expected call to ChatRepositoryMock.CreateRoster at\n%s", m.funcCreateRosterOrigin)
	}

	if !m.CreateRosterMock.invocationsDone() && afterCreateRosterCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatRepositoryMock.CreateRoster at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateRosterMock.expectedInvocations), m.CreateRosterMock.expectedInvocationsOrigin, afterCreateRosterCounter)
	}
}

type mChatRepositoryMockDeleteChat struct {
	optional           bool
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockDeleteChatExpectation
	expectations       []*ChatRepositoryMockDeleteChatExpectation

	callArgs []*ChatRepositoryMockDeleteChatParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ChatRepositoryMockDeleteChatExpectation specifies expectation struct of the ChatRepository.DeleteChat
type ChatRepositoryMockDeleteChatExpectation struct {
	mock               *ChatRepositoryMock
	params             *ChatRepositoryMockDeleteChatParams
	paramPtrs          *ChatRepositoryMockDeleteChatParamPtrs
	expectationOrigins ChatRepositoryMockDeleteChatExpectationOrigins
	results            *ChatRepositoryMockDeleteChatResults
	returnOrigin       string
	Counter            uint64
}

// ChatRepositoryMockDeleteChatParams contains parameters of the ChatRepository.DeleteChat
type ChatRepositoryMockDeleteChatParams struct {
	ctx context.Context
	id  int64
}

// ChatRepositoryMockDeleteChatParamPtrs contains pointers to parameters of the ChatRepository.DeleteChat
type ChatRepositoryMockDeleteChatParamPtrs struct {
	ctx *context.Context
	id  *int64
}

// ChatRepositoryMockDeleteChatResults contains results of the ChatRepository.DeleteChat
type ChatRepositoryMockDeleteChatResults struct {
	err error
}

// ChatRepositoryMockDeleteChatOrigins contains origins of expectations of the ChatRepository.DeleteChat
type ChatRepositoryMockDeleteChatExpectationOrigins struct {
	origin    string
	originCtx string
	originId  string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Optional() *mChatRepositoryMockDeleteChat {
	mmDeleteChat.optional = true
	return mmDeleteChat
}

// Expect sets up expected params for ChatRepository.DeleteChat
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Expect(ctx context.Context, id int64) *mChatRepositoryMockDeleteChat {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Set")
	}

	if mmDeleteChat.defaultExpectation == nil {
		mmDeleteChat.defaultExpectation = &ChatRepositoryMockDeleteChatExpectation{}
	}

	if mmDeleteChat.defaultExpectation.paramPtrs != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by ExpectParams functions")
	}

	mmDeleteChat.defaultExpectation.params = &ChatRepositoryMockDeleteChatParams{ctx, id}
	mmDeleteChat.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmDeleteChat.expectations {
		if minimock.Equal(e.params, mmDeleteChat.defaultExpectation.params) {
			mmDeleteChat.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteChat.defaultExpectation.params)
		}
	}

	return mmDeleteChat
}

// ExpectCtxParam1 sets up expected param ctx for ChatRepository.DeleteChat
func (mmDeleteChat *mChatRepositoryMockDeleteChat) ExpectCtxParam1(ctx context.Context) *mChatRepositoryMockDeleteChat {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Set")
	}

	if mmDeleteChat.defaultExpectation == nil {
		mmDeleteChat.defaultExpectation = &ChatRepositoryMockDeleteChatExpectation{}
	}

	if mmDeleteChat.defaultExpectation.params != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Expect")
	}

	if mmDeleteChat.defaultExpectation.paramPtrs == nil {
		mmDeleteChat.defaultExpectation.paramPtrs = &ChatRepositoryMockDeleteChatParamPtrs{}
	}
	mmDeleteChat.defaultExpectation.paramPtrs.ctx = &ctx
	mmDeleteChat.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmDeleteChat
}

// ExpectIdParam2 sets up expected param id for ChatRepository.DeleteChat
func (mmDeleteChat *mChatRepositoryMockDeleteChat) ExpectIdParam2(id int64) *mChatRepositoryMockDeleteChat {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Set")
	}

	if mmDeleteChat.defaultExpectation == nil {
		mmDeleteChat.defaultExpectation = &ChatRepositoryMockDeleteChatExpectation{}
	}

	if mmDeleteChat.defaultExpectation.params != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Expect")
	}

	if mmDeleteChat.defaultExpectation.paramPtrs == nil {
		mmDeleteChat.defaultExpectation.paramPtrs = &ChatRepositoryMockDeleteChatParamPtrs{}
	}
	mmDeleteChat.defaultExpectation.paramPtrs.id = &id
	mmDeleteChat.defaultExpectation.expectationOrigins.originId = minimock.CallerInfo(1)

	return mmDeleteChat
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.DeleteChat
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Inspect(f func(ctx context.Context, id int64)) *mChatRepositoryMockDeleteChat {
	if mmDeleteChat.mock.inspectFuncDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.DeleteChat")
	}

	mmDeleteChat.mock.inspectFuncDeleteChat = f

	return mmDeleteChat
}

// Return sets up results that will be returned by ChatRepository.DeleteChat
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Return(err error) *ChatRepositoryMock {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Set")
	}

	if mmDeleteChat.defaultExpectation == nil {
		mmDeleteChat.defaultExpectation = &ChatRepositoryMockDeleteChatExpectation{mock: mmDeleteChat.mock}
	}
	mmDeleteChat.defaultExpectation.results = &ChatRepositoryMockDeleteChatResults{err}
	mmDeleteChat.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmDeleteChat.mock
}

// Set uses given function f to mock the ChatRepository.DeleteChat method
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Set(f func(ctx context.Context, id int64) (err error)) *ChatRepositoryMock {
	if mmDeleteChat.defaultExpectation != nil {
		mmDeleteChat.mock.t.Fatalf("Default expectation is already set for the ChatRepository.DeleteChat method")
	}

	if len(mmDeleteChat.expectations) > 0 {
		mmDeleteChat.mock.t.Fatalf("Some expectations are already set for the ChatRepository.DeleteChat method")
	}

	mmDeleteChat.mock.funcDeleteChat = f
	mmDeleteChat.mock.funcDeleteChatOrigin = minimock.CallerInfo(1)
	return mmDeleteChat.mock
}

// When sets expectation for the ChatRepository.DeleteChat which will trigger the result defined by the following
// Then helper
func (mmDeleteChat *mChatRepositoryMockDeleteChat) When(ctx context.Context, id int64) *ChatRepositoryMockDeleteChatExpectation {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Set")
	}

	expectation := &ChatRepositoryMockDeleteChatExpectation{
		mock:               mmDeleteChat.mock,
		params:             &ChatRepositoryMockDeleteChatParams{ctx, id},
		expectationOrigins: ChatRepositoryMockDeleteChatExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmDeleteChat.expectations = append(mmDeleteChat.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.DeleteChat return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockDeleteChatExpectation) Then(err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockDeleteChatResults{err}
	return e.mock
}

// Times sets number of times ChatRepository.DeleteChat should be invoked
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Times(n uint64) *mChatRepositoryMockDeleteChat {
	if n == 0 {
		mmDeleteChat.mock.t.Fatalf("Times of ChatRepositoryMock.DeleteChat mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDeleteChat.expectedInvocations, n)
	mmDeleteChat.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmDeleteChat
}

func (mmDeleteChat *mChatRepositoryMockDeleteChat) invocationsDone() bool {
	if len(mmDeleteChat.expectations) == 0 && mmDeleteChat.defaultExpectation == nil && mmDeleteChat.mock.funcDeleteChat == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDeleteChat.mock.afterDeleteChatCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDeleteChat.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// DeleteChat implements mm_repository.ChatRepository
func (mmDeleteChat *ChatRepositoryMock) DeleteChat(ctx context.Context, id int64) (err error) {
	mm_atomic.AddUint64(&mmDeleteChat.beforeDeleteChatCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteChat.afterDeleteChatCounter, 1)

	mmDeleteChat.t.Helper()

	if mmDeleteChat.inspectFuncDeleteChat != nil {
		mmDeleteChat.inspectFuncDeleteChat(ctx, id)
	}

	mm_params := ChatRepositoryMockDeleteChatParams{ctx, id}

	// Record call args
	mmDeleteChat.DeleteChatMock.mutex.Lock()
	mmDeleteChat.DeleteChatMock.callArgs = append(mmDeleteChat.DeleteChatMock.callArgs, &mm_params)
	mmDeleteChat.DeleteChatMock.mutex.Unlock()

	for _, e := range mmDeleteChat.DeleteChatMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDeleteChat.DeleteChatMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteChat.DeleteChatMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteChat.DeleteChatMock.defaultExpectation.params
		mm_want_ptrs := mmDeleteChat.DeleteChatMock.defaultExpectation.paramPtrs

		mm_got := ChatRepositoryMockDeleteChatParams{ctx, id}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDeleteChat.t.Errorf("ChatRepositoryMock.DeleteChat got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteChat.DeleteChatMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.id != nil && !minimock.Equal(*mm_want_ptrs.id, mm_got.id) {
				mmDeleteChat.t.Errorf("ChatRepositoryMock.DeleteChat got unexpected parameter id, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteChat.DeleteChatMock.defaultExpectation.expectationOrigins.originId, *mm_want_ptrs.id, mm_got.id, minimock.Diff(*mm_want_ptrs.id, mm_got.id))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteChat.t.Errorf("ChatRepositoryMock.DeleteChat got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmDeleteChat.DeleteChatMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteChat.DeleteChatMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteChat.t.Fatal("No results are set for the ChatRepositoryMock.DeleteChat")
		}
		return (*mm_results).err
	}
	if mmDeleteChat.funcDeleteChat != nil {
		return mmDeleteChat.funcDeleteChat(ctx, id)
	}
	mmDeleteChat.t.Fatalf("Unexpected call to ChatRepositoryMock.DeleteChat. %v %v", ctx, id)
	return
}

// DeleteChatAfterCounter returns a count of finished ChatRepositoryMock.DeleteChat invocations
func (mmDeleteChat *ChatRepositoryMock) DeleteChatAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteChat.afterDeleteChatCounter)
}

// DeleteChatBeforeCounter returns a count of ChatRepositoryMock.DeleteChat invocations
func (mmDeleteChat *ChatRepositoryMock) DeleteChatBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteChat.beforeDeleteChatCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.DeleteChat.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Calls() []*ChatRepositoryMockDeleteChatParams {
	mmDeleteChat.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockDeleteChatParams, len(mmDeleteChat.callArgs))
	copy(argCopy, mmDeleteChat.callArgs)

	mmDeleteChat.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteChatDone returns true if the count of the DeleteChat invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockDeleteChatDone() bool {
	if m.DeleteChatMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteChatMock.invocationsDone()
}

// MinimockDeleteChatInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockDeleteChatInspect() {
	for _, e := range m.DeleteChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.DeleteChat at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterDeleteChatCounter := mm_atomic.LoadUint64(&m.afterDeleteChatCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteChatMock.defaultExpectation != nil && afterDeleteChatCounter < 1 {
		if m.DeleteChatMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ChatRepositoryMock.DeleteChat at\n%s", m.DeleteChatMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.DeleteChat at\n%s with params: %#v", m.DeleteChatMock.defaultExpectation.expectationOrigins.origin, *m.DeleteChatMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteChat != nil && afterDeleteChatCounter < 1 {
		m.t.Errorf("Expected call to ChatRepositoryMock.DeleteChat at\n%s", m.funcDeleteChatOrigin)
	}

	if !m.DeleteChatMock.invocationsDone() && afterDeleteChatCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatRepositoryMock.DeleteChat at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteChatMock.expectedInvocations), m.DeleteChatMock.expectedInvocationsOrigin, afterDeleteChatCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ChatRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockChatExistsInspect()

			m.MinimockCreateChatInspect()

			m.MinimockCreateMessageInspect()

			m.MinimockCreateRosterInspect()

			m.MinimockDeleteChatInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ChatRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ChatRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockChatExistsDone() &&
		m.MinimockCreateChatDone() &&
		m.MinimockCreateMessageDone() &&
		m.MinimockCreateRosterDone() &&
		m.MinimockDeleteChatDone()
}
